
このプログラムをレビューしてください
このプログラムは、AtCoderの問題を解くためのものだと思われます。
次の点について改善が必要です。

ヘッダーファイルのインクルード
#include<bits/stdc++.h>
は、標準では提供されないヘッダーファイルを一括でインクルードする方法ですが、コンパイル速度や互換性の問題があるため、避けることが推奨されています。必要なヘッダーファイルを個別にインクルードするようにしましょう。

名前空間の使用
名前空間
std
を明示的に指定することで、名前の衝突を回避し、プログラムの可読性を向上させることができます。

コメント
コメントが英語以外の言語で記述されているため、英語圏の人々が読んだ場合に理解しづらくなっています。また、TODOコメントに対して、どのような変更をする必要があるのか具体的に書くべきです。

変数名の命名規則
変数名について、キャメルケース（先頭の単語を小文字、以降の単語の先頭を大文字にする）やスネークケース（アンダースコアで単語を区切る）などの命名規則がありますが、このプログラムでは混在しているため、一貫性を持たせるようにしましょう。

関数の分割
main()
関数が長くなっており、可読性が低下しています。関数を小さく分割し、それぞれの関数が明確な目的を持つようにすることで、プログラム全体の可読性を向上させましょう。

マジックナンバー
プログラム中に出現する具体的な数値を「マジックナンバー」と呼び、プログラムの可読性を損なう原因となります。定数や列挙型を用いて、意味のある名前を付けることで、プログラム全体の理解しやすさが向上します。

可変長配列の使用
可変長配列を使う場合、動的メモリ割当により実行速度が遅くなることがあります。静的配列を使うことで、パフォーマンスを向上させることができます。

コードの整形
コードの整形が不十分で、可読性が低下しています。インデントやスペースの数、改行の位置など、一定のルールに基づいた形式でコードを整形しましょう。

これらの点を改善することで、プログラムの品質が向上し、メンテナンスや拡張性も高まります。
